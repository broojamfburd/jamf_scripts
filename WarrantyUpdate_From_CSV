#!/bin/bash

#updates warranty info from a csv file in jamf MUST be ran locally

# Name: update_warranty.sh
# Updated: 10/11/23
# Author: Brooke Burdick
# This script updates computer warranty expiration date based on serial number from a csv file
# column 1 should be serial number, column 2 should be warranty expiration date in format YYYY-MM-DD
# Line 1 should not have headers
# file should be .csv format
# API User should have both READ and WRITE permissions
# Version: 2.0


#applescript funciton for getting user input
getUserInput()
{
	launchctl asuser $(stat -f %u /dev/console) osascript <<-APPLESCRIPT
	tell app "System Events"
	text returned of (display dialog "$1" default answer "" buttons {"OK"} default button 1)
	end tell
	APPLESCRIPT
}

#gather API info
args=("$@")
jssUrl=$(getUserInput "what is the full URL of your Jamf server? (Make sure to copy the FULL URL https://server.jamfcoud.com)")
file=$(getUserInput "Where is your CSV file stored? (Make sure to copy the FULL path)")
jssname=$(getUserInput "What is the username of the JSS API Account?")
jsspass=$(getUserInput "What is the password of the JSS API Account?")

#Verify we can read the file
data=`cat $file`
if [[ "$data" == "" ]]; then
	osascript -e 'display dialog "Unable to read CSV File. Ensure there are no spaces."'
	exit 1
fi

#Find how many computers to import and set "recordsNum", which is how many times it will loop
recordsNum=`awk -F, 'END {printf "%s\n", NR}' $file`
echo "Number of computers = " $recordsNum

#Set a counter for the loop, start at 0
counter="0"

#Loop through the CSV and submit data to the API
while [ $counter -lt $recordsNum ]
do
	counter=$[$counter+1]
	line=`echo "$data" | head -n $counter | tail -n 1`
	serialNumber=`echo "$line" | awk -F , '{print $1}'`
	warrExpires=`echo "$line" | awk -F , '{print $2}'`
	
	
	curl -u $jssname:$jsspass $jssUrl/JSSResource/computers/serialnumber/$serialNumber -H "Content-Type: application/xml" -d "<computer><purchasing><warranty_expires>$warrExpires</warranty_expires></purchasing></computer>" -X PUT
	
	
	echo $output
	echo "******$serialNumber Updated!******"
	
	
done
osascript -e 'display dialog "Process Complete!"'

exit 0


