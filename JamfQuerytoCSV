#!/bin/bash

################################
# Copyright Brooke Burdick
# October 2023
# Brooburd@gmail.com
# This script will ask for a server name, API username, API password and create a CSV report of any jamf server.
# Extension attributes and other attributes will be edited by you.
# you will need to update the column names to fit your server. You can also add/ remove attributes. 
# You can also leave as-is and try a test run
# This is VERY useful for MSPs with multiple Jamf Servers to pull reports from, all in one place
# API user must have at least read (Auditor) access 
################################

#applescript function for getting user input
getUserInput()
{
	launchctl asuser $(stat -f %u /dev/console) osascript <<-APPLESCRIPT
	tell app "System Events"
	text returned of (display dialog "$1" default answer "" buttons {"OK"} default button 1)
	end tell
	APPLESCRIPT
}

jssURL=$(getUserInput "What is the full URL of the server?")
server=$(getUserInput "What is the name of the client?")
#jssURL="https://$server.jamfcloud.com"
filePath=$(getUserInput "Where do you wish to save this report? (Make sure to copy the FULL path)")
jssUser=$(getUserInput "What is the username of the JSS API Account?")
jssPass=$(getUserInput "What is the password of the JSS API Account?")

#Get bearer Token for auth
authToken=$( /usr/bin/curl \
--request POST \
--silent \
--url "$jssURL/api/v1/auth/token" \
--user "$jssUser:$jssPass" )

# parse auth token
token=$( /usr/bin/plutil \
-extract token raw - <<< "$authToken" )

tokenExpiration=$( /usr/bin/plutil \
-extract expires raw - <<< "$authToken" )

localTokenExpirationEpoch=$( TZ=GMT /bin/date -j \
-f "%Y-%m-%dT%T" "$tokenExpiration" \
+"%s" 2> /dev/null )

echo Token: "$token"
echo Expiration: "$tokenExpiration"
echo Expiration epoch: "$localTokenExpirationEpoch"

# verify auth token is valid
checkToken=$( /usr/bin/curl \
--header "Authorization: Bearer $token" \
--silent \
--url "$jamfProURL/api/v1/auth" \
--write-out "%{http_code}" )

tokenStatus=${checkToken: -3}
echo Token status: "$tokenStatus"

#Populate CSV with column names
echo "Server,Company,Name,Serial_Number,Last_Checkin,Enrollment_Date,Supervised?,Enrolled_via_DEP?,OS_Version,Processor_Type,Model,Architecture,IP_Address,Intel Only-Battery_Capacity,Intel Only-Processor_Speed,Drive _Capacity,RAM_MB,User_Approved_MDM,Encrypted,UserName,Email,ActivationLocked" > "$outputFile"

#Get IDs that exist
echo "Downloading list of computer IDs..."
ids+=($(curl -X GET -s -H "Authorization: Bearer $token" --url "$jssURL/JSSResource/computers" -H "Accept: text/xml" | xmllint --format - | awk -F'>|<' '/<id>/{print $3}' | sort -n))

#loop through each ID# and get the attributes
for id in "${ids[@]}"; do
	echo "Obtaining info of computer with ID: $id"
	#general query
	response=$(curl -X GET -s -H "Authorization: Bearer $token" --url "$jssURL/JSSResource/computers/id/$id" -H "Accept: text/xml")
	
	#different path for ext attributes
	extattrpath=$(curl -X GET -s -H "Authorization: Bearer $token" --url "$jssURL/JSSResource/computers/id/$id/subset/ExtensionAttributes" -H "Accept: text/xml")
	name=$(echo $response | xmllint --xpath '//computer/general/name/text()' - )
	id=$(echo $response | xmllint --xpath '//computer/general/id/text()' - )
	serial=$(echo $response | xmllint --xpath '//computer/general/serial_number/text()' - )
	supervised=$(echo $response | xmllint --xpath '//computer/general/supervised/text()' - )
	ip=$(echo $response | xmllint --xpath '//computer/general/ip_address/text()' - )
	checkin=$(echo $response | xmllint --xpath '//computer/general/last_contact_time/text()' - | awk '{print $1}')
	enrollment=$(echo $response | xmllint --xpath '//computer/general/initial_entry_date/text()' - )
	arch=$(echo $response | xmllint --xpath '//computer/hardware/processor_architecture/text()' - )
	batterycap=$(echo $response | xmllint --xpath '//computer/hardware/battery_capacity/text()' - )
	os=$(echo $response | xmllint --xpath '//computer/hardware/os_version/text()' - )
	model=$(echo $response | xmllint --xpath '//computer/hardware/model/text()' - | tr ',' '\n') 
	speed=$(echo $response | xmllint --xpath '//computer/hardware/processor_speed_mhz/text()' - )
	drivecap=$(echo $response | xmllint --xpath '//computer/hardware/storage/device/drive_capacity_mb/text()' - )
	ramcap=$(echo $response | xmllint --xpath '//computer/hardware/total_ram_mb/text()' - )
	processor=$(echo $response | xmllint --xpath '//computer/hardware/processor_type/text()' - )
	depenrolled=$(echo $response | xmllint --xpath '//computer/general/management_status/enrolled_via_dep/text()' - )
	uamdm=$(echo $response | xmllint --xpath '//computer/general/management_status/user_approved_mdm/text()' - )
	activationlock=$(echo $response | xmllint --xpath '//computer/security/activation_lock/text()' - )
	#percentfull=$(echo $response | xmllint --xpath '//computer/hardware/storage/partition/name/Macintosh\ HD\ (Boot Partition)/percentage_full/text()' - )
	#encrypted=$(echo $response | xmllint --xpath '//computer/hardware/storage/disk/disk0/partition/name/Macintosh\ HD\ (Boot Partition)/filevault2_status/text()' - )
	
	#extension attributes
	#these will be unique, but here is an example, replace the extension attribute name in the path
	#latestos=$(echo $extattrpath | xmllint --xpath "//*[name='LatestOSSupported']/value/text()" - )

	
	#user info
	username=$(echo $response | xmllint --xpath '//computer/location/username/text()' - )
	fullName=$(echo $response | xmllint --xpath '//computer/location/fullname/text()' - )
	email=$(echo $response | xmllint --xpath '//computer/location/email_address/text()' - )
	#error handling	
	
	if [[ -n "$name" ]]; then
		echo "Success; found computer with ID: $id"
		
		#input data into spreadsheet
		echo ""$server","$company","$name","$serial","$checkin","$enrollment","$supervised","$depenrolled","$os","$processor","$model","$arch","$ip","$batterycap","$speed","$drivecap","$ramcap","$uamdm","$encrypted","$username","$email","$activationlock""" >> "$outputFile"
	else
		echo "Error; can't GET name of computer with ID: $id"
		sleep 1
	fi
	
done		
