#!/bin/bash

################################
# Copyright Brooke Burdick
# October 2023
# Brooburd@gmail.com
# This script will ask for a server name, API username, API password and create a CSV report of any jamf server.
# Extension attributes and other attributes will be edited by you.
# you will need to update the column names to fit your server. You can also add/ remove attributes. 
# You can also leave as-is and try a test run
# This is VERY useful for MSPs with multiple Jamf Servers to pull reports from, all in one place
# API user must have at least read (Auditor) access and Basic Authentication allowed in Password settings
################################

#applescript funciton for getting user input
getUserInput()
{
	launchctl asuser $(stat -f %u /dev/console) osascript <<-APPLESCRIPT
	tell app "System Events"
	text returned of (display dialog "$1" default answer "" buttons {"OK"} default button 1)
	end tell
	APPLESCRIPT
}

#jssURL=$(getUserInput "What is the full URL of the server?")

server=$(getUserInput "What is the name of the client? (Must be the name in the jamf URL: https://name.jamfcloud.com")
jssURL="https://$server.jamfcloud.com"
filePath=$(getUserInput "Where do you wish to save this report? (Make sure to copy the FULL path)")
jssUser=$(getUserInput "What is the username of the JSS API Account?")
jssPass=$(getUserInput "What is the password of the JSS API Account?")

#echo $server
#echo $jssURL

#add headings and overwrite last run or make a new report with today's date

today=$(date +”%d-%b-%Y”)
#get local username for path
function get_user {
	/bin/ls -l /dev/console | /usr/bin/awk '{ print $3 }'
}
currentuser=$(get_user)
echo $currentuser

outputFile=$filePath/"JamfReports
mkdir $outputFile
outputFile=$outputFile/$server.csv

#Populate CSV with column names
echo "Server,Company,Name,Serial_Number,Last_Checkin,Supervised?,Enrolled_via_DEP?,OS_Version,Processor_Type,Model,Architecture,IP_Address,Battery_Capacity,Processor_Speed,Drive _Capacity,RAM_MB,User_Approved_MDM,Latest_Os_Supported,Encrypted,UserName,Email,ActivationLocked,iCloudAccount,S1Version" > "$outputFile"

#Get IDs that exist
echo "Downloading list of computer IDs..."
ids+=($(curl -X GET -s -k -u "$jssUser:$jssPass" "$jssURL/JSSResource/computers" | xmllint --format - | awk -F'>|<' '/<id>/{print $3}' | sort -n))

#loop through each ID# and get the attributes
for id in "${ids[@]}"; do
	echo "Obtaining info of computer with ID: $id"

	#general query string
	response=$(curl -X GET -s -k -u "$jssUser:$jssPass" "$jssURL/JSSResource/computers/id/$id" )
	
	name=$(echo $response | xmllint --xpath '//computer/general/name/text()' - )
	id=$(echo $response | xmllint --xpath '//computer/general/id/text()' - )
	serial=$(echo $response | xmllint --xpath '//computer/general/serial_number/text()' - )
	supervised=$(echo $response | xmllint --xpath '//computer/general/supervised/text()' - )
	ip=$(echo $response | xmllint --xpath '//computer/general/ip_address/text()' - )
	checkin=$(echo $response | xmllint --xpath '//computer/general/last_contact_time/text()' - )
	arch=$(echo $response | xmllint --xpath '//computer/hardware/processor_architecture/text()' - )
	batterycap=$(echo $response | xmllint --xpath '//computer/hardware/battery_capacity/text()' - )
	os=$(echo $response | xmllint --xpath '//computer/hardware/os_version/text()' - )
	model=$(echo $response | xmllint --xpath '//computer/hardware/model/text()' - | tr ',' '\n') 
	speed=$(echo $response | xmllint --xpath '//computer/hardware/processor_speed_mhz/text()' - )
	drivecap=$(echo $response | xmllint --xpath '//computer/hardware/storage/device/drive_capacity_mb/text()' - )
	ramcap=$(echo $response | xmllint --xpath '//computer/hardware/total_ram_mb/text()' - )
	processor=$(echo $response | xmllint --xpath '//computer/hardware/processor_type/text()' - )
	depenrolled=$(echo $response | xmllint --xpath '//computer/general/management_status/enrolled_via_dep/text()' - )
	uamdm=$(echo $response | xmllint --xpath '//computer/general/management_status/user_approved_mdm/text()' - )
	activationlock=$(echo $response | xmllint --xpath '//computer/security/activation_lock/text()' - )
	#percentfull=$(echo $response | xmllint --xpath '//computer/hardware/storage/partition/name/Macintosh\ HD\ (Boot Partition)/percentage_full/text()' - )
	#encrypted=$(echo $response | xmllint --xpath '//computer/hardware/storage/disk/disk0/partition/name/Macintosh\ HD\ (Boot Partition)/filevault2_status/text()' - )
	
	#extension attributes
	#different path for ext attributes
	extattrpath=$(curl -X GET -s -k -u "$jssUser:$jssPass" "$jssURL/JSSResource/computers/id/$id/subset/ExtensionAttributes")

	#####THESE ARE CUSTOM TO EACH SERVER!!!!#####
	#Example: My EXT Attribute is called "company" (case-sensitive) I would add it here: [name='Company'] 
	#it also MUST be under the Extension Attrbutes tab

	#EXAMPLES:
	#latestos=$(echo $extattrpath | xmllint --xpath "//*[name='LatestOSSupported']/value/text()" - )
	#company=$(echo $extattrpath | xmllint --xpath "//*[name='Company']/value/text()" - )
	#encrypted=$(echo $extattrpath | xmllint --xpath "//*[name='EncryptionStatus']/value/text()" - )
	#iCloudEnabled=$(echo $extattrpath | xmllint --xpath "//*[name='iCloud Account Status']/value/text()" - )
	#iCloudDrive=$(echo $extattrpath | xmllint --xpath "//*[name='iCloud Drive Status']/value/text()" - )
	#SentinelOneAgentversion=$(echo $extattrpath | xmllint --xpath "//*[name='Sentinel One Version']/value/text()" - )
	
	#user info
	username=$(echo $response | xmllint --xpath '//computer/location/username/text()' - )
	email=$(echo $response | xmllint --xpath '//computer/location/email_address/text()' - )

	#error handling	
	if [[ -n "$name" ]]; then
		echo "Success; found computer with ID: $id"

		#input data into spreadsheet
		echo ""$server","$company","$name","$serial","$checkin","$supervised","$depenrolled","$os","$pocessor","$model","$arch","$ip","$batterycap","$speed","$drivecap","$ramcap","$uamdm","$latestos","$encrypted","$username","$email","$activationlock","$iCloudEnabled","$SentinelOneAgentversion"" >> "$outputFile"
	else
		echo "Error; can't GET name of computer with ID: $id"
		sleep 1
	fi
	
done
	
